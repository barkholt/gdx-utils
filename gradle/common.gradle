buildscript {
	repositories { jcenter() }
	dependencies { classpath 'us.carrclan.david.gradle:gradle-site-plugin:0.2.0' }
}

ext {
	libName = 'libgdx-utils'
	nameAppendix = project == rootProject ? '' : (project.parent != rootProject ? project.parent.nameAppendix + '-' : '') + project.name
	nameFull = libName + (nameAppendix.empty ? '' : "-$nameAppendix")
	libgdxVersion = '1.9.10'
}

apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
	mavenCentral()
	mavenLocal()
	maven { url 'https://oss.sonatype.org/content/repositories/releases/' }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

// java

sourceCompatibility = 1.7

sourceSets {
	main {
		java.srcDirs = ['src/main']
		resources.srcDirs = ['src/main']
	}
	test.java.srcDirs = ['src/test']
}

jar {
	archiveBaseName = libName
	archiveAppendix = nameAppendix

	archiveBaseName.set(libName)
	manifest {
		attributes 'Implementation-Title': libName, 'Implementation-Version': archiveVersion
	}

//	manifest.attributes += [
//			'web': 'http://dermetfan.net',
//			'github': 'https://github.com/tommyettinger/gdx-utils',
//			'license': 'Apache-2.0',
//			'group': project.group,
//			'artifact': nameFull,
//			'version': project.version,
//			'libGDX': libgdxVersion,
//			'java': targetCompatibility,
//			'timestamp': System.currentTimeMillis()
//	]
}

javadoc {
	title = nameFull
	File argFile = file("$rootProject.projectDir/gradle/javadoc-${System.getProperty('java.version').subSequence(0, 3)}-args")
	if(!argFile.exists())
		argFile = file("$rootProject.projectDir/gradle/javadoc-args")
	options.optionFiles argFile
}

// distribution

task distSources(type: Jar, group: 'distribution') {
	description = 'Assembles a jar archive containing the main sources and resources.'
	from sourceSets.main.java
	from sourceSets.main.resources
	archiveBaseName = libName
	archiveAppendix = nameAppendix
	archiveClassifier = 'sources'
	destinationDirectory = jar.destinationDirectory
	manifest = jar.manifest
}

task distJavadoc(type: Jar, dependsOn: javadoc, group: 'distribution') {
	description = 'Assembles a jar archive containing the javadoc.'
	from javadoc.destinationDir
	archiveBaseName = libName
	archiveAppendix = nameAppendix
	archiveClassifier = 'javadoc'
	destinationDirectory = jar.destinationDirectory
	manifest = jar.manifest
}

task distBundle(type: Zip, dependsOn: [jar, distSources, distJavadoc], group: 'distribution') {
	description = 'Assembles a zip archive containing the binary, source and javadoc archives as well as the LICENSE file.'
	from jar.archiveFile
	from distSources.archiveFile
	from distJavadoc.archiveFile
	from "$rootDir/LICENSE"
	archiveBaseName = libName
	archiveAppendix = nameAppendix
	destinationDirectory = jar.destinationDirectory
}

// upload

artifacts {
	archives distSources, distJavadoc
}


task fixNewlines(description: 'makes sure all text files end with \\n') {
	doFirst {
		int count = 0
		fileTree(rootProject.projectDir).visit {
			if (!it.file.isDirectory()) {
				String mime = java.nio.file.Files.probeContentType(java.nio.file.Paths.get(it.file.path))
				if (mime != null && (mime.startsWith('text/') || mime.equals('application/xml')) && !it.file.text.endsWith('\n')) {
					it.file.text += '\n'
					count++
				}
			}
		}
	}
}
defaultTasks 'fixNewlines'

// methods

Object property(String property) {
	return hasProperty(property) ? project[property] : ''
}
